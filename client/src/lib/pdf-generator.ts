import jsPDF from 'jspdf';

interface PDFOptions {
  title: string;
  content: string;
  filename?: string;
}

export function generatePDF({ title, content, filename = 'article.pdf' }: PDFOptions) {
  const doc = new jsPDF();
  
  // Set font
  doc.setFont('helvetica');
  
  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(title, 20, 30);
  
  // Content
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  // Clean HTML content and convert to plain text with proper formatting
  const cleanContent = (content || 'Your article content will appear here...')
    .replace(/<p[^>]*>/g, '\n\n')  // Convert <p> tags to paragraph breaks
    .replace(/<\/p>/g, '')         // Remove closing </p> tags
    .replace(/<br\s*\/?>/g, '\n')  // Convert <br> tags to line breaks
    .replace(/<[^>]*>/g, '')       // Remove all other HTML tags
    .replace(/\n\s*\n\s*\n/g, '\n\n') // Clean up multiple line breaks
    .trim();

  // Split content into lines that fit the page width
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const maxLineWidth = pageWidth - (margin * 2);
  
  const lines = doc.splitTextToSize(cleanContent, maxLineWidth);
  
  let yPosition = 50;
  const lineHeight = 7;
  const pageHeight = doc.internal.pageSize.height;
  
  lines.forEach((line: string) => {
    if (yPosition > pageHeight - 30) {
      doc.addPage();
      yPosition = 30;
    }
    
    doc.text(line, margin, yPosition);
    yPosition += lineHeight;
  });
  
  // Footer
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(
      `Generated by Neocortical Extension Layer â€¢ Page ${i}`,
      pageWidth / 2,
      pageHeight - 15,
      { align: 'center' }
    );
  }
  
  // Download the PDF
  doc.save(filename);
}
